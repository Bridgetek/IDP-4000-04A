/*
This file is automatically generated
DO NOT MODIFY BY HAND
Usr_CircleImageButton
Header
*/

#ifndef Usr_CircleImageButton__H
#define Usr_CircleImageButton__H

#include "Esd_Base.h"
#include "Esd_Core.h"
#include "Esd_TouchTag.h"
#include "Ft_DataTypes.h"
#include "Ft_Esd.h"
#include "Ft_Esd_BitmapInfo.h"
#include "Ft_Esd_Image.h"
#include "Ft_Esd_Math.h"
#include "Ft_Esd_Widget.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_ARRAY_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Usr_CircleImageButton_CLASSID 0x4E745493
ESD_SYMBOL(Usr_CircleImageButton_CLASSID, Type = esd_classid_t)

ESD_WIDGET(Usr_CircleImageButton, Include = "Usr_CircleImageButton.h", Callback, X = 6, Y = 4, Width = 72, Height = 72)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	ESD_SIGNAL(Down)
	void(* Down)(void *context);
	ESD_SIGNAL(Up)
	void(* Up)(void *context);
	ESD_SIGNAL(Pushed)
	void(* Pushed)(void *context);
	/* Minimum Alpha Filter, Set 0 to disable it */
	ESD_INPUT(MinAlpha, DisplayName = "Alpha Filter", Type = ft_uint8_t, Min = 0, Max = 255, Default = 1)
	ft_uint8_t(* MinAlpha)(void *context);
	ESD_VARIABLE(Color, Type = ft_argb32_t, Default = #ffffff, Public)
	ft_argb32_t Color;
	ESD_INPUT(BitmapNormal, DisplayName = "Bitmap Normal", Type = Ft_Esd_BitmapCell)
	Ft_Esd_BitmapCell(* BitmapNormal)(void *context);
	ESD_VARIABLE(BackgroundColor, Type = ft_argb32_t, Default = #000000, Public)
	ft_argb32_t BackgroundColor;
	ESD_VARIABLE(BorderColor, Type = ft_argb32_t, Default = #ffffff, Public)
	ft_argb32_t BorderColor;
	ESD_VARIABLE(BorderWidth, Type = int, Default = 3, Public)
	int BorderWidth;
	ESD_VARIABLE(Align, Type = Esd_Align, Default = ESD_ALIGN_TOPLEFT, Public)
	uint8_t Align;
	ESD_VARIABLE(Scaling, Type = Esd_Scaling, Default = ESD_SCALING_ORIGINAL, Public)
	uint8_t Scaling;
	ESD_VARIABLE(AutoResize, Type = Esd_AutoResize, Default = ESD_AUTORESIZE_BOTH, Public)
	ft_uint8_t AutoResize;
	ESD_VARIABLE(ScaleX, Type = ft_int32_f16_t, Default = 1, Public)
	ft_int32_f16_t ScaleX;
	ESD_VARIABLE(ScaleY, Type = ft_int32_f16_t, Default = 1, Public)
	ft_int32_f16_t ScaleY;
	Esd_TouchTag Touch_Tag;
	Ft_Esd_Image ESD_Image;
} Usr_CircleImageButton;

void Usr_CircleImageButton__Initializer(Usr_CircleImageButton *context);

ESD_SLOT(Start)
void Usr_CircleImageButton_Start(Usr_CircleImageButton *context);

ESD_SLOT(Update)
void Usr_CircleImageButton_Update(Usr_CircleImageButton *context);

ESD_SLOT(End)
void Usr_CircleImageButton_End(Usr_CircleImageButton *context);

ESD_SLOT(Render)
void Usr_CircleImageButton_Render(Usr_CircleImageButton *context);

ESD_OUTPUT(Pushing, Type = ft_bool_t)
ft_bool_t Usr_CircleImageButton_Pushing(Usr_CircleImageButton *context);

#endif /* Usr_CircleImageButton__H */

/* end of file */

/*
This file is automatically generated
DO NOT MODIFY BY HAND
Usr_CurtainAdjustPage
Header
*/

#ifndef Usr_CurtainAdjustPage__H
#define Usr_CurtainAdjustPage__H

#include "Esd_Base.h"
#include "Esd_Core.h"
#include "Esd_FontInfo.h"
#include "Ft_Esd.h"
#include "Ft_Esd_BitmapInfo.h"
#include "Ft_Esd_Gradient.h"
#include "Ft_Esd_Image.h"
#include "Ft_Esd_ImageButton.h"
#include "Ft_Esd_Label.h"
#include "Ft_Esd_Layout_Fixed.h"
#include "Ft_Esd_Line.h"
#include "Ft_Esd_Rectangle.h"
#include "Ft_Esd_Theme.h"
#include "Ft_Esd_Timer.h"
#include "Ft_Esd_TouchArea.h"
#include "Ft_Esd_TransparentRectButton.h"
#include "Ft_Esd_Widget.h"
#include "close_curtain.h"
#include "left_curtain.h"
#include "newImageScale.h"
#include "open_curtain.h"
#include "return_circle_64.h"
#include "right_curtain.h"
#include "window4.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_ARRAY_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Usr_CurtainAdjustPage_CLASSID 0xDFF18759
ESD_SYMBOL(Usr_CurtainAdjustPage_CLASSID, Type = esd_classid_t)

ESD_WIDGET(Usr_CurtainAdjustPage, Include = "Usr_CurtainAdjustPage.h", Callback, X = 0, Y = 0, Width = 400, Height = 300, Page)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	ESD_VARIABLE(PercentageClosed, Type = int, Default = 100, Public)
	int PercentageClosed;
	ESD_VARIABLE(Open_Color, Type = ft_argb32_t, Default = #ffffff, Private)
	ft_argb32_t Open_Color;
	ESD_VARIABLE(Delta, Type = int, Default = 0, Private)
	int Delta;
	ESD_VARIABLE(isLongTap, Type = ft_bool_t, Default = false, Private)
	ft_bool_t isLongTap;
	ESD_VARIABLE(Control_Color, Type = ft_argb32_t, Default = #ffffff, Private)
	ft_argb32_t Control_Color;
	ESD_VARIABLE(Close_Color, Type = ft_argb32_t, Default = #ffffff, Private)
	ft_argb32_t Close_Color;
	ESD_SIGNAL(Timeout)
	void(* Timeout)(void *context);
	ESD_SIGNAL(UserTouch)
	void(* UserTouch)(void *context);
	ESD_VARIABLE(X, Type = int, Default = 80, Private)
	int X;
	ESD_VARIABLE(Angle, Type = int, Private)
	int Angle;
	ESD_SIGNAL(BackPushed)
	void(* BackPushed)(void *context);
	ESD_VARIABLE(Radius, Type = int, Private)
	int Radius;
	Ft_Esd_Timer Curtain_Timer;
	Ft_Esd_Timer LongTap_Timer;
	Ft_Esd_TouchArea Touch_Area;
	Ft_Esd_Timer ESD_Timer;
	Ft_Esd_Timer ScreenSaver_Timeout;
	Ft_Esd_Layout_Fixed Fixed_Position;
	Ft_Esd_Label ESD_Label;
	Ft_Esd_ImageButton ESD_Image_Button;
	Ft_Esd_Line Line_Widget;
	Ft_Esd_Gradient ESD_Gradient_Widget_2;
	Ft_Esd_Image RightCurtain;
	Ft_Esd_TransparentRectButton Close_Button;
	Ft_Esd_Label Percent_Label;
	Ft_Esd_TransparentRectButton Open_Button;
	Ft_Esd_Image Curtain_Close;
	Ft_Esd_Image Curtain_Open;
	newImageScale newImageScale;
	Ft_Esd_Rectangle ESD_Rectangle_Widget_1;
	Ft_Esd_Rectangle ESD_Rectangle_Widget;
	Ft_Esd_Image ESD_Image;
	Ft_Esd_Gradient ESD_Gradient_Widget;
	Ft_Esd_Rectangle ESD_Rectangle_Widget_4;
	Ft_Esd_Rectangle ESD_Rectangle_Widget_2;
} Usr_CurtainAdjustPage;

void Usr_CurtainAdjustPage__Initializer(Usr_CurtainAdjustPage *context);

ESD_SLOT(End)
void Usr_CurtainAdjustPage_End(Usr_CurtainAdjustPage *context);

ESD_SLOT(Right)
void Usr_CurtainAdjustPage_Right(Usr_CurtainAdjustPage *context);

ESD_SLOT(Left)
void Usr_CurtainAdjustPage_Left(Usr_CurtainAdjustPage *context);

ESD_SLOT(SetPercemtage)
void Usr_CurtainAdjustPage_SetPercemtage(Usr_CurtainAdjustPage *context);

ESD_SLOT(Start)
void Usr_CurtainAdjustPage_Start(Usr_CurtainAdjustPage *context);

ESD_SLOT(Update)
void Usr_CurtainAdjustPage_Update(Usr_CurtainAdjustPage *context);

#endif /* Usr_CurtainAdjustPage__H */

/* end of file */

/*
This file is automatically generated
DO NOT MODIFY BY HAND
Usr_CircullarSlider
Header
*/

#ifndef Usr_CircullarSlider__H
#define Usr_CircullarSlider__H

#include "Esd_Base.h"
#include "Ft_Esd.h"
#include "Ft_Esd_ArcLine.h"
#include "Ft_Esd_CircleLine.h"
#include "Ft_Esd_Layout_Fixed.h"
#include "Ft_Esd_Layout_Tag.h"
#include "Ft_Esd_RenderForwarder.h"
#include "Ft_Esd_Ring.h"
#include "Ft_Esd_Timer.h"
#include "Ft_Esd_TouchTag.h"
#include "Ft_Esd_Widget.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_ARRAY_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Usr_CircullarSlider_CLASSID 0x44B680EB
ESD_SYMBOL(Usr_CircullarSlider_CLASSID, Type = esd_classid_t)

ESD_WIDGET(Usr_CircullarSlider, Include = "Usr_CircullarSlider.h", Callback, X = 2, Y = 4, Width = 479, Height = 478)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	ESD_VARIABLE(Angle, Type = ft_int16_t, Min = 0, Max = 360, Default = 90, Private)
	ft_int16_t Angle;
	/* Circular slide in clockwise direction */
	ESD_INPUT(Clockwise, DisplayName = "Clockwise", Type = ft_bool_t, Default = true)
	ft_bool_t(* Clockwise)(void *context);
	/* for inner circle only */
	ESD_INPUT(InnerOrigin, DisplayName = "Origin", Type = int, Min = 0, Max = 360, Default = 270)
	int(* InnerOrigin)(void *context);
	ESD_INPUT(RingWidth, DisplayName = "Ring Width", Type = int, Min = 1, Max = 100, Default = 50)
	int(* RingWidth)(void *context);
	ESD_INPUT(InnerBorder, DisplayName = "Inner Border", Type = int, Min = -1, Max = 100, Default = 2)
	int(* InnerBorder)(void *context);
	ESD_INPUT(OuterBorder, DisplayName = "Outer Border", Type = int, Min = -1, Max = 100, Default = 4)
	int(* OuterBorder)(void *context);
	ESD_VARIABLE(StartAngle, Type = int, Private)
	int StartAngle;
	ESD_VARIABLE(StartValue, Type = int, Private)
	int StartValue;
	ESD_INPUT(BorderColor, DisplayName = "Border Color", Type = ft_argb32_t, Default = #d0cec6)
	ft_argb32_t(* BorderColor)(void *context);
	ESD_VARIABLE(NewAngle, Type = int, Private)
	int NewAngle;
	ESD_INPUT(SelectionColor, DisplayName = "Selection Color", Type = ft_argb32_t, Default = #c55a11)
	ft_argb32_t(* SelectionColor)(void *context);
	/* Clamped New Angle */
	ESD_VARIABLE(ClampedNewAngle, DisplayName = "Angle", Type = int, Min = 0, Max = 360, Default = 0, Private)
	int ClampedNewAngle;
	ESD_VARIABLE(TrackAngle, Type = int, Private)
	int TrackAngle;
	ESD_INPUT(BackgroundColor, DisplayName = "Background Color", Type = ft_argb32_t, Default = #060504)
	ft_argb32_t(* BackgroundColor)(void *context);
	/* Value Color for inner circle if it requires */
	ESD_INPUT(ValueColor, DisplayName = "Value Color", Type = ft_argb32_t, Default = #35ac39)
	ft_argb32_t(* ValueColor)(void *context);
	ESD_VARIABLE(StartTrackAngle, Type = int, Private)
	int StartTrackAngle;
	ESD_VARIABLE(IsClockwise, Type = ft_bool_t, Private)
	ft_bool_t IsClockwise;
	ESD_VARIABLE(IsTracking, Type = ft_bool_t, Private)
	ft_bool_t IsTracking;
	ESD_VARIABLE(Value, Type = ft_int16_t, Min = 0, Max = 1024, Default = 0, Public)
	ft_int16_t Value;
	ESD_VARIABLE(IsReady, Type = ft_bool_t, Private)
	ft_bool_t IsReady;
	/* Unit value for one complete circle */
	ESD_VARIABLE(UnitCircle, DisplayName = "Unit Value", Type = ft_int16_t, Min = 10, Max = 1024, Default = 100, Public)
	ft_int16_t UnitCircle;
	/* Clamped New Angle */
	ESD_VARIABLE(ShiftedOrigin, DisplayName = "Angle", Type = int, Min = 0, Max = 360, Default = 0, Private)
	int ShiftedOrigin;
	/* Clamped New Angle */
	ESD_VARIABLE(StartOrigin, DisplayName = "Angle", Type = int, Min = 0, Max = 360, Default = 0, Private)
	int StartOrigin;
	ESD_VARIABLE(MaxValue, DisplayName = "Max Value", Type = ft_int16_t, Min = 10, Max = 1024, Default = 200, Public)
	ft_int16_t MaxValue;
	ESD_VARIABLE(DeltaVal, Type = int, Private)
	int DeltaVal;
	ESD_SIGNAL(Down)
	void(* Down)(void *context);
	ESD_SIGNAL(Up)
	void(* Up)(void *context);
	ESD_SIGNAL(ValueChanged)
	void(* ValueChanged)(void *context);
	Ft_Esd_Timer ESD_Timer;
	Ft_Esd_TouchTag Touch_Tag;
	Ft_Esd_RenderForwarder Render_Forwarder;
	Ft_Esd_Layout_Tag Set_Touch_Tag;
	Ft_Esd_Layout_Fixed Fixed_Positioning;
	Ft_Esd_ArcLine ESD_Arc_Line;
	Ft_Esd_CircleLine ESD_Circle_Line;
	Ft_Esd_Ring ESD_Ring;
} Usr_CircullarSlider;

void Usr_CircullarSlider__Initializer(Usr_CircullarSlider *context);

ESD_SLOT(Update)
void Usr_CircullarSlider_Update(Usr_CircullarSlider *context);

ESD_SLOT(End)
void Usr_CircullarSlider_End(Usr_CircullarSlider *context);

ESD_SLOT(Start)
void Usr_CircullarSlider_Start(Usr_CircullarSlider *context);

ESD_OUTPUT(DeltaValue, Type = int)
int Usr_CircullarSlider_DeltaValue(Usr_CircullarSlider *context);

#endif /* Usr_CircullarSlider__H */

/* end of file */
